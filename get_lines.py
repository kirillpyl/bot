import datetime
import random

from telegram.ext import Updater, MessageHandler, Filters
from telegram.ext import CallbackContext, CommandHandler
import sqlite3
import requests
from telegram import ReplyKeyboardMarkup, Update
from telegram import ReplyKeyboardRemove
from telegram import KeyboardButton
from datetime import date

TOKEN = '1798183807:AAF6MpavJ0O-urpRvBa1uqicmo2nslczCPY'  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞

URL = 'http://api.openweathermap.org/data/2.5/weather?q={}&appid=196ed9c0c5bf90bef2fb3a1c52b6d925'  # –°—Å—ã–ª–∫–∞ –¥–ª—è
# –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ

today = date.today()
status_horoscope, status_cities, status_events = False, False, False
button_help = '–ü–æ–º–æ–≥–∏ –º–Ω–µ!'
button_horoscope = '–ì–æ—Ä–æ—Å–∫–æ–ø'
button_weather = '–ü–æ–≥–æ–¥–∞'
button_astr_events = '–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è 2021'
button_back = '–ù–∞–∑–∞–¥ üîô'
zodiac_sings = [['–û–≤–µ–Ω', '–¢–µ–ª–µ—Ü', '–ë–ª–∏–∑–Ω–µ—Ü—ã'], ['–†–∞–∫', '–õ–µ–≤', '–î–µ–≤–∞'],
                ['–í–µ—Å—ã', '–°–∫–æ—Ä–ø–∏–æ–Ω', '–°—Ç—Ä–µ–ª–µ—Ü'], ['–ö–æ–∑–µ—Ä–æ–≥', '–í–æ–¥–æ–ª–µ–π', '–†—ã–±—ã'], [button_back]]
cities = [['–í–æ–ª–æ–≥–¥–∞', '–í–µ–ª–∏–∫–∏–π –£—Å—Ç—é–≥', '–ß–µ—Ä–µ–ø–æ–≤–µ—Ü'], ['–¢–æ—Ç—å–º–∞', '–í—ã—Ç–µ–≥—Ä–∞', '–£—Å—Ç—é–∂–Ω–∞'],
          ['–®–µ–∫—Å–Ω–∞', '–ë–µ–ª–æ–∑–µ—Ä—Å–∫', '–ö–∏—Ä–∏–ª–ª–æ–≤'], [button_back]]
comands = ['/help - –ü–æ–º–æ–≥–∏ –º–Ω–µ', '/horoscope - –ì–æ—Ä–æ—Å–∫–æ–ø', '/weather - –ü–æ–≥–æ–¥–∞',
           '/astr_events - –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è 2021']
tt = [['–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞']]
zz = ''
first_message = False
declension_cities = {
    '–í–æ–ª–æ–≥–¥–∞': '–í–æ–ª–æ–≥–¥–µ', '–í–µ–ª–∫–∏–∏–π –£—Å—Ç—é–≥': '–í–µ–ª–∏–∫–æ–º –£—Å—Ç—é–≥–µ', '–ß–µ—Ä–µ–ø–æ–≤–µ—Ü': '–ß–µ—Ä–µ–ø–æ–≤—Ü–µ', '–¢–æ—Ç—å–º–∞':
        '–¢–æ—Ç—å–º–µ', '–í—ã—Ç–µ–≥—Ä–∞': '–í—ã—Ç–µ–≥—Ä–µ', '–£—Å—Ç—é–∂–Ω–∞': '–£—Å—Ç—é–∂–Ω–µ', '–®–µ–∫—Å–Ω–∞': '–®–µ–∫—Å–Ω–µ', '–ë–µ–ª–æ–∑–µ—Ä—Å–∫': '–ë–µ–ª–æ–∑–µ—Ä—Å–∫–µ',
    '–ö–∏—Ä–∏–ª–ª–æ–≤': '–ö–∏—Ä–∏–ª–ª–æ–≤–µ'
}
months_dict = {'–Ø–Ω–≤–∞—Ä—å': '01', '–§–µ–≤—Ä–∞–ª—å': '02', '–ú–∞—Ä—Ç': '03', '–ê–ø—Ä–µ–ª—å': '04', '–ú–∞–π': '05', '–ò—é–Ω—å': '06', '–ò—é–ª—å': '07',
               '–ê–≤–≥—É—Å—Ç': '08', '–°–µ–Ω—Ç—è–±—Ä—å': '09', '–û–∫—Ç—è–±—Ä—å': '10', '–ù–æ—è–±—Ä—å': '11', '–î–µ–∫–∞–±—Ä—å': '12'
               }
months = [['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç'], ['–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å'], ['–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç',
          '–°–µ–Ω—Ç—è–±—Ä—å'], ['–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'], [button_back]]
comands = ['/help - –ü–æ–º–æ–≥–∏ –º–Ω–µ', '/horoscope - –ì–æ—Ä–æ—Å–∫–æ–ø', '/weather - –ü–æ–≥–æ–¥–∞',
           '/astr_events - –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è 2021']
start = False

with open('horoscope1.txt', encoding="utf-8") as f1:
    a = f1.readlines()
with open('horoscope2.txt', encoding="utf-8") as f2:
    b = f2.readlines()

reply_markup_start = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text=button_horoscope), KeyboardButton(text=button_weather),
         KeyboardButton(text=button_astr_events)],
        [KeyboardButton(text=button_help)]],
    resize_keyboard=True)


# Main —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    updater = Updater(TOKEN,
                      use_context=True)
    dp = updater.dispatcher

    dp.add_handler(MessageHandler(filters=Filters.all, callback=message_handler))

    updater.start_polling()
    updater.idle()


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏
def button_help_hundler(update: Update, context: CallbackContext):
    global reply_markup_start
    update.message.reply_text(
        text='–ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞: \n{}'.format(
            '\n'.join(comands)
        ),
        reply_markup=reply_markup_start,
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
def button_horoscope_hundler(update: Update, context: CallbackContext):
    global status_horoscope
    reply_markup = ReplyKeyboardMarkup(zodiac_sings, resize_keyboard=True)
    status_horoscope = True
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞',
                              reply_markup=reply_markup)


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–≥–æ–¥—ã
def button_weather_hundler(update: Update, context: CallbackContext):
    global status_cities
    status_cities = True
    reply_markup = ReplyKeyboardMarkup(cities, resize_keyboard=True)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –í–æ–ª–æ–≥–æ–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É',
                              reply_markup=reply_markup)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ
def button_back_hundler(update: Update, context: CallbackContext):
    global status_cities, status_horoscope
    status_cities, status_horoscope = False, False
    update.message.reply_text(
        text='–ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞: \n{}'.format(
            '\n'.join(comands)
        ),
        reply_markup=reply_markup_start,
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
def message_handler(update: Updater, context: CallbackContext):
    global first_message, zz, tt, status_events
    text = update.message.text
    if text == button_help or str(text)[1:] == 'help':
        return button_help_hundler(update=update, context=context)
    elif text == button_horoscope or str(text)[1:] == 'horoscope':
        return button_horoscope_hundler(update=update, context=context)
    elif text == button_weather or str(text)[1:] == 'weather':
        return button_weather_hundler(update=update, context=context)
    elif text == button_back:
        return button_back_hundler(update=update, context=context)
    elif text == button_astr_events:
        status_events = True
        reply_markup = ReplyKeyboardMarkup(months)
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è',
                                  reply_markup=reply_markup)
    elif (text in months[0] or text in months[1] or text in months[2] or text in months[3]) and status_events:
        t = database(update=update, name='', key='ast', month=text)
        for i in t:
            update.message.reply_text(i[0])
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∫–∞–Ω—á–∏–≤–∞—é—â–µ–µ—Å—è –Ω–∞ –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞
    elif update.message.text[-1] == '?':
        update.message.reply_text('–ö–æ–Ω–µ—á–Ω–æ –º–æ–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å! –¢–æ–ª—å–∫–æ —è –∫—É–ª—å—Ç—É—Ä–Ω–æ –ø—Ä–æ–º–æ–ª—á—É... '
                                  '–õ—É—á—à–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–æ–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.')
        button_help_hundler(update=update, context=context)
    # –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–ø–∏—Å–∞–ª —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    elif update.message.text[-1] == '.':
        update.message.reply_text('–í–ø–æ–ª–Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ! –ùa –≤–∫—É—Å –∏ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∏—â–µ–π –Ω–µ—Ç ;)')
    elif not first_message or str(text)[1:] == 'start':
        first_message = True
        name = update['message']['chat']['first_name']
        familar_user = database(update=update, name=name, key='remember', month='')
        if familar_user:
            update.message.reply_text('–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π, {}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?'.format(name),
                                      reply_markup=reply_markup_start)
        else:
            update.message.reply_text('–ü—Ä–∏–≤–µ—Ç, {}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?'.format(name),
                                      reply_markup=reply_markup_start)
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ—Å–∫–æ–º –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∑–Ω–∞–∫—É –∑–æ–¥–∏–∞–∫–∞
    elif text in ['–û–≤–µ–Ω', '–¢–µ–ª–µ—Ü', '–ë–ª–∏–∑–Ω–µ—Ü—ã', '–†–∞–∫', '–õ–µ–≤', '–î–µ–≤–∞',
                  '–í–µ—Å—ã', '–°–∫–æ—Ä–ø–∏–æ–Ω', '–°—Ç—Ä–µ–ª–µ—Ü', '–ö–æ–∑–µ—Ä–æ–≥', '–í–æ–¥–æ–ª–µ–π', '–†—ã–±—ã']:
        reply_markup = ReplyKeyboardMarkup(
            keyboard=[
                ['–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞']
            ],
            resize_keyboard=True,
        )
        status_horoscope = True
        update.message.reply_text('–í—ã–±—Ä–∞–Ω–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ - {}. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –¥–µ–Ω—å'.format(text),
                                  reply_markup=reply_markup)
        zz = text
    elif text in tt[0]:
        if text == '–°–µ–≥–æ–¥–Ω—è':
            text = 'Today'
        else:
            text = 'Tomorrow'
        update.message.reply_text(horoscope_bd(update, context, text, zz))
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–≥–æ–¥—É –≤ –∫–∞–∫–æ–º-–ª–∏–±–æ –≥–æ—Ä–æ–¥–µ –í–æ–ª–æ–≥–æ–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
    elif (text in cities[0] or text in cities[1] or text in cities[2]) and status_cities:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
        req = (requests.get(URL.format(text))).json()
        # –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –≥—Ä–∞–¥—É—Å—ã —Ü–µ–ª—å—Å–∏—è –∏–∑ –∫–µ–ª—å–≤–∏–Ω–∞
        wether = round(float(req['main']['temp']) - 273.15)
        update.message.reply_text(f'–í {declension_cities.get(text)} —Å–µ–π—á–∞—Å {wether} –≥—Ä–∞–¥—É—Å–æ–≤')
    else:
        pass


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
def database(update: Update, name, key, month):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    con = sqlite3.connect('horoscope_bot_users')
    cursor = con.cursor()
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—ã–¥–∞—Ç—å –Ω–∏–∫ —Å—Ç–∞—Ä–æ–≥–æ
    if key == 'remember':
        res = cursor.execute(f"""SELECT login FROM users WHERE login = '{name}'""").fetchone()
        if res is None:
            res = cursor.execute(f"""INSERT INTO users(login) VALUES('{name}')""")
            con.commit()
            return None
        else:
            return True
    elif key == 'ast':
        res = cursor.execute(f"""SELECT name FROM events WHERE month = '{months_dict[month]}'""").fetchall()
        return res
    con.close()


def horoscope_text(day, sing):
    hp = []
    for i in range(1):
        hp.append(a[random.randrange(len(a))][:-1])
    hp.append(b[random.randrange(len(b))][:-1])
    hp = ' '.join(hp)
    return hp


def horoscope_bd(update: Update, context: CallbackContext, day, sing):
    con = sqlite3.connect('zodiac_sings.db')
    cursor = con.cursor()
    res = cursor.execute(f"""SELECT today FROM z_sings""").fetchone()
    dat_e = datetime.datetime.today().strftime("%d-%m-%Y")
    if res[0] == dat_e:
        return cursor.execute(f"""SELECT today FROM horoscope WHERE login = ?""",
                              (sing,)).fetchone()
    else:
        res = horoscope_text(day, sing)
        cursor.execute(f"""UPDATE horoscope SET today = '{res}'""").fetchone()
        cursor.execute(f"""UPDATE horoscope SET sing = '{sing}'""").fetchone()
        cursor.execute(f"""UPDATE z_sings SET today ='{dat_e}' WHERE sings = '{sing}'""").fetchone()
        con.commit()
        return res


if __name__ == '__main__':
    main()
